@startuml
top to bottom direction
hide empty methods

' Here we adjust the horizontal spacing for better spatial rendering (the PlantUML default is ~20)
skinparam nodesep 20
' Here we adjust the vertical spacing for better spatial rendering (the PlantUML default is ~30)
skinparam ranksep 30

skinparam BackgroundColor #FFFFFF
skinparam shadowing false
skinparam RoundCorner 5
skinparam BorderColor #454645
skinparam ArrowColor #454645
skinparam FontColor #000000

skinparam class {
  ' Concrete classes style definition
  BackgroundColor #FFFFE0
  FontColor #000000
  AttributeFontColor #000000
  StereotypeFontColor #000000
  HeaderFontColor #000000
  BorderColor #454645
  BorderThickness 1
  
  ' Abstract classes style definition
  BackgroundColor<<abstract>> #D3D3D3
  FontColor<<abstract>> #000000
  AttributeFontColor<<abstract>> #000000
  StereotypeFontColor<<abstract>> #000000
  HeaderFontColor<<abstract>> #000000
  BorderColor<<abstract>> #454645
  BorderThickness<<abstract>> 1
  
  ' Enumerations style definition
  BackgroundColor<<enumeration>> #90EE90
  FontColor<<enumeration>> #000000
  AttributeFontColor<<enumeration>> #000000
  StereotypeFontColor<<enumeration>> #000000
  HeaderFontColor <<enumeration>> #000000
  BorderColor<<enumeration>> #454645
  BorderThickness<<enumeration>> 1
  
  ' CIMDatatypes style definition
  BackgroundColor<<CIMDatatype>> #FFEBCD
  FontColor<<CIMDatatype>> #000000
  AttributeFontColor<<CIMDatatype>> #000000
  StereotypeFontColor<<CIMDatatype>> #000000
  HeaderFontColor<<CIMDatatype>> #000000
  BorderColor<<CIMDatatype>> #454645
  BorderThickness<<CIMDatatype>> 1
  
  ' Compound classes style definition
  BackgroundColor<<Compound>> #FFEBCD
  FontColor<<Compound>> #000000
  AttributeFontColor<<Compound>> #000000
  StereotypeFontColor<<Compound>> #000000
  HeaderFontColor<<Compound>> #000000
  BorderColor<<Compound>> #454645
  BorderThickness<<Compound>> 1
  
  ' Primitive classes style definition
  BackgroundColor<<Primitive>> #E6E6FF
  FontColor<<Primitive>> #000000
  AttributeFontColor<<Primitive>> #000000
  StereotypeFontColor<<Primitive>> #000000
  HeaderFontColor<<Primitive>> #000000
  BorderColor<<Primitive>> #454645
  BorderThickness<<Primitive>> 1
  
  ' Errors classes style definition
  BackgroundColor<<error>> #FFC0CB
  FontColor<<error>> #000000
  AttributeFontColor<<error>> #000000
  StereotypeFontColor<<error>> #000000
  HeaderFontColor<<error>> #000000
  BorderColor<<error>> #454645
  BorderThickness<<error>> 1
}
skinparam shadowing true

hide <<abstract>> stereotype
hide <<error>> stereotype


skinparam note {
  BorderColor #454645
  BorderThickness 1.5
  FontSize 14
  Font Bold
  FontColor #000000
}
' Add a note towards the upper left corner of the diagram
note as UnbalancedElectricalNote #lightyellow
   Profile: UnbalancedElectrical
   Namespace: http://www.ucaiug.org/gmdm/electrical/unbalanced#
end note

' ACDCTerminal inherits from IdentifiedObject
abstract class ACDCTerminal  <<abstract>> {
   +sequenceNumber : integer [0..1]
}

IdentifiedObject <|-- ACDCTerminal

' ACLineSegment inherits from Conductor
class ACLineSegment <<Description>>  {
}

Conductor <|-- ACLineSegment
ACLineSegment "+ACLineSegments 0..*" --> "+PerLengthImpedance 1" PerLengthImpedance

' ACLineSegmentPhase inherits from PowerSystemResource
class ACLineSegmentPhase <<Description>>  {
   +sequenceNumber : integer [1]
}

PowerSystemResource <|-- ACLineSegmentPhase
ACLineSegmentPhase " " --> "+phase 1" SinglePhaseKind#red
ACLineSegmentPhase "+ACLineSegmentPhases 0..*" --> "+ACLineSegment 0..1" ACLineSegment

' AssetInfo
abstract class AssetInfo  <<abstract>> {
}


' AsynchronousMachine inherits from RotatingMachine
class AsynchronousMachine <<Description>>  {
}

RotatingMachine <|-- AsynchronousMachine

' IdentifiedObject
class IdentifiedObject   {
   +nominalVoltage : Voltage [1]
}


' BatteryUnit inherits from PowerElectronicsUnit
class BatteryUnit   {
   +ratedE : RealEnergy [0..1]
}

PowerElectronicsUnit <|-- BatteryUnit

' Breaker inherits from ProtectedSwitch
class Breaker <<Description>>  {
}

ProtectedSwitch <|-- Breaker

' BusbarSection inherits from Connector
class BusbarSection <<Description>>  {
}

Connector <|-- BusbarSection

' ConductingAssetInfo inherits from AssetInfo
abstract class ConductingAssetInfo  <<abstract>> {
   +ratedVoltage : Voltage [0..1]
}

AssetInfo <|-- ConductingAssetInfo

' ConductingEquipment inherits from Equipment
abstract class ConductingEquipment  <<abstract>> {
}

Equipment <|-- ConductingEquipment
ConductingEquipment "+ConductingEquipment 0..*" --> "+BaseVoltage 1" BaseVoltage#red

' Conductor inherits from ConductingEquipment
abstract class Conductor  <<abstract>> {
   +length : Length [1]
}

ConductingEquipment <|-- Conductor

' ConnectivityNode inherits from IdentifiedObject
class ConnectivityNode <<Description>>  {
}

IdentifiedObject <|-- ConnectivityNode

' ConnectivityNodeContainer inherits from PowerSystemResource
abstract class ConnectivityNodeContainer  <<abstract>> {
}

PowerSystemResource <|-- ConnectivityNodeContainer

' Connector inherits from ConductingEquipment
abstract class Connector  <<abstract>> {
}

ConductingEquipment <|-- Connector

' Enumeration ConverterControlModeKind
enum ConverterControlModeKind <<gmdm>><<enumeration>><<Attribute>>  {
   constantPowerFactor
   constantReactivePower
   dynamic
}

' IdentifiedObject
class IdentifiedObject   {
}


' Diagram
class Diagram   {
   +orientation : OrientationKind [0..1]
   +x1InitialView : float [0..1]
   +x2InitialView : float [0..1]
   +y1InitialView : float [0..1]
   +y2InitialView : float [0..1]
}

Diagram "+Diagram 0..*" --> "+DiagramStyle 0..1" DiagramStyle

' DiagramObject
class DiagramObject   {
   +drawingOrder : integer [0..1]
   +isPolygon : boolean [0..1]
   +offsetX : float [0..1]
   +offsetY : float [0..1]
   +rotation : AngleDegrees [0..1]
}

DiagramObject "+DiagramElements 0..*" --> "+Diagram 1" Diagram
DiagramObject "+StyledObjects 0..*" --> "+DiagramObjectStyle 1" DiagramObjectStyle

' DiagramObjectGluePoint
class DiagramObjectGluePoint   {
}

DiagramObjectGluePoint "+DiagramObjectGluePoint 0..1" --> "+DiagramObjectPoints 1..*" DiagramObjectPoint

' DiagramObjectPoint
class DiagramObjectPoint   {
   +sequenceNumber : integer [0..1]
   +xPosition : float [1]
   +yPosition : float [1]
   +zPosition : float [0..1]
}

DiagramObjectPoint "+DiagramObjectPoints 0..*" --> "+DiagramObject 1" DiagramObject

' IdentifiedObject
class IdentifiedObject   {
}


' DiagramStyle
class DiagramStyle   {
}


' Disconnector inherits from Switch
class Disconnector <<Description>>  {
}

Switch <|-- Disconnector

' EnergyConnection inherits from ConductingEquipment
abstract class EnergyConnection  <<abstract>> {
}

ConductingEquipment <|-- EnergyConnection

' EnergyConsumer inherits from EnergyConnection
class EnergyConsumer <<Description>>  {
   +customerCount : integer [0..1]
   +grounded : boolean [0..1]
}

EnergyConnection <|-- EnergyConsumer
EnergyConsumer " " --> "+phaseConnection 1" PhaseShuntConnectionKind#red
EnergyConsumer "+EnergyConsumer 0..*" --> "+LoadResponse 0..1" LoadResponseCharacteristic

' EnergyConsumerPhase
class EnergyConsumerPhase   {
   +phase : SinglePhaseKind [1]
}

EnergyConsumerPhase "+EnergyConsumerPhase 0..*" --> "+EnergyConsumer 1" EnergyConsumer#red

' EnergySource inherits from EnergyConnection
class EnergySource <<Description>>  {
   +nominalVoltage : Voltage [1]
   +r : Resistance [1]
   +x : Reactance [1]
}

EnergyConnection <|-- EnergySource

' Equipment inherits from PowerSystemResource
abstract class Equipment  <<abstract>> {
   +aggregate : boolean [0..1]
   +normallyInService : boolean [0..1]
}

PowerSystemResource <|-- Equipment
Equipment "+AdditionalGroupedEquipment 0..*" --> "+AdditionalEquipmentContainer 0..1" EquipmentContainer#red
Equipment "+Equipments 0..*" --> "+EquipmentContainer 1" EquipmentContainer#red

' EquipmentContainer
abstract class EquipmentContainer  <<abstract>> {
}


' Feeder inherits from EquipmentContainer
class Feeder   {
}

EquipmentContainer <|-- Feeder
Feeder "+NormalEnergizedFeeder 0..*" --o "+NormalEnergizingSubstation 1" Substation

' FossilFuel inherits from IdentifiedObject
class FossilFuel   {
   +fossilFuelType : FuelType [1]
}

IdentifiedObject <|-- FossilFuel

' Enumeration FuelType
enum FuelType <<ShadowExtension>><<gmdm>><<enumeration>><<Attribute>>  {
   brownCoalLignite
   coal
   coalDerivedGas
   diesel
   gas
   hardCoal
   lignite
   oil
   oilShale
   other
   peat
}

' Fuse inherits from Switch
class Fuse <<Description>>  {
}

Switch <|-- Fuse

' GeneratingUnit inherits from Equipment
abstract class GeneratingUnit  <<abstract>> {
   +ratedGrossMaxP : ActivePower [0..1]
}

Equipment <|-- GeneratingUnit
GeneratingUnit "+GeneratingUnit 0..1" --> "+RotatingMachine 1" RotatingMachine

' IdentifiedObject inherits from Identity
abstract class IdentifiedObject  <<abstract>> {
   +description : string [0..1]
   +name : string [0..1]
}

Identity <|-- IdentifiedObject

' Identity
abstract class Identity  <<abstract>> {
   +identifier : string [1]
}


' IndividualPnode inherits from Pnode
class IndividualPnode   {
}

Pnode <|-- IndividualPnode
IndividualPnode "+IndividualPnode 0..1" --> "+ConnectivityNode 1" ConnectivityNode#red

' Line inherits from EquipmentContainer
class Line   {
}

EquipmentContainer <|-- Line

' LinearShuntCompensator inherits from ShuntCompensator
class LinearShuntCompensator <<Description>>  {
   +bPerSection : Susceptance [1]
   +gPerSection : Conductance [1]
}

ShuntCompensator <|-- LinearShuntCompensator

' LinearShuntCompensatorPhase inherits from ShuntCompensatorPhase
class LinearShuntCompensatorPhase <<Description>>  {
   +bPerSection : Susceptance [1]
   +gPerSection : Conductance [1]
}

ShuntCompensatorPhase <|-- LinearShuntCompensatorPhase

' LoadBreakSwitch inherits from ProtectedSwitch
class LoadBreakSwitch <<Description>>  {
}

ProtectedSwitch <|-- LoadBreakSwitch

' LoadResponseCharacteristic inherits from IdentifiedObject
class LoadResponseCharacteristic   {
   +exponentModel : boolean [0..1]
   +pConstantCurrent : float [0..1]
   +pConstantImpedance : float [0..1]
   +pConstantPower : float [0..1]
   +pFrequencyExponent : float [0..1]
   +pVoltageExponent : float [0..1]
   +qConstantCurrent : float [0..1]
   +qConstantImpedance : float [0..1]
   +qConstantPower : float [0..1]
   +qFrequencyExponent : float [0..1]
   +qVoltageExponent : float [0..1]
}

IdentifiedObject <|-- LoadResponseCharacteristic

' IdentifiedObject
class IdentifiedObject <<ShadowExtension>><<gmdm>>  {
}

Location "+Location 0..*" --> "+CoordinateSystem 0..1" CoordinateSystem

' Name
abstract class Name <<Attribute>> <<abstract>> {
}


' NoLoadTest inherits from TransformerTest
class NoLoadTest   {
   +energisedEndVoltage : Voltage [0..1]
   +excitingCurrent : PerCent [0..1]
   +excitingCurrentZero : PerCent [0..1]
   +loss : KiloActivePower [0..1]
   +lossZero : KiloActivePower [0..1]
}

TransformerTest <|-- NoLoadTest
NoLoadTest "+EnergisedEndNoLoadTests 0..*" --> "+EnergisedEnd 1" TransformerEndInfo

' Enumeration OrderedPhaseCodeKind
enum OrderedPhaseCodeKind <<gmdm>><<enumeration>><<Attribute>>  {
   A
   AB
   ABC
   ABCN
   ABN
   AC
   ACB
   ACBN
   ACN
   AN
   B
   BA
   BAC
   BACN
   BAN
   BC
   BCA
   BCAN
   BCN
   BN
   [Remaining 33 literals hidden]
}

' Enumeration OrientationKind
enum OrientationKind <<enumeration>><<Attribute>>  {
   negative
   positive
}

' PerLengthImpedance inherits from PerLengthLineParameter
abstract class PerLengthImpedance  <<abstract>> {
}

PerLengthLineParameter <|-- PerLengthImpedance

' PerLengthLineParameter inherits from IdentifiedObject
abstract class PerLengthLineParameter  <<abstract>> {
}

IdentifiedObject <|-- PerLengthLineParameter

' PerLengthPhaseImpedance inherits from PerLengthImpedance
class PerLengthPhaseImpedance   {
   +conductorCount : integer [1]
}

PerLengthImpedance <|-- PerLengthPhaseImpedance

' Enumeration PhaseCode
enum PhaseCode <<enumeration>><<Attribute>>  {
   A
   AB
   ABC
   ABCN
   ABN
   AC
   ACN
   AN
   B
   BC
   BCN
   BN
   C
   CN
   N
   X
   XN
   XY
   XYN
   none
   [Remaining 11 literals hidden]
}

' Enumeration PhaseCountKind
enum PhaseCountKind <<enumeration>><<Attribute>>  {
   other
   singlePhase
   threePhase
}

' PhaseImpedanceData inherits from Identity
class PhaseImpedanceData   {
   +b : SusceptancePerLength [1]
   +column : integer [1]
   +r : ResistancePerLength [1]
   +row : integer [1]
   +x : ReactancePerLength [1]
}

Identity <|-- PhaseImpedanceData
PhaseImpedanceData "+PhaseImpedanceData 0..*" --> "+PhaseImpedance 1" PerLengthPhaseImpedance

' Enumeration PhaseShuntConnectionKind
enum PhaseShuntConnectionKind <<enumeration>><<Attribute>>  {
   D
   G
   I
   Y
   Yn
}

' PhotoVoltaicUnit inherits from PowerElectronicsUnit
class PhotoVoltaicUnit   {
}

PowerElectronicsUnit <|-- PhotoVoltaicUnit

' Pnode
abstract class Pnode  <<abstract>> {
}


' PositionPoint
class PositionPoint   {
   +sequenceNumber : integer [1]
   +xPosition : string [1]
   +yPosition : string [1]
   +zPosition : string [0..1]
}

PositionPoint "+PositionPoints 0..*" --> "+Location 1" Location

' PowerElectronicsConnection inherits from RegulatingCondEq
class PowerElectronicsConnection <<gmdm>><<ShadowExtension>><<Description>>  {
   +<<gmdm>> controlMode : ConverterControlModeKind [0..1]
   +maxQ : ReactivePower [0..1]
   +minQ : ReactivePower [0..1]
   +ratedS : ApparentPower [0..1]
   +ratedU : Voltage [0..1]
}

RegulatingCondEq <|-- PowerElectronicsConnection
PowerElectronicsConnection "+PowerElectronicsConnection 0..1" --> "+PowerElectronicsConnectionPhase 0..*" PowerElectronicsConnectionPhase#red

' PowerElectronicsConnectionPhase
class PowerElectronicsConnectionPhase   {
   +phase : SinglePhaseKind [1]
}

PowerElectronicsConnectionPhase "+PowerElectronicsConnectionPhase 0..*" --> "+PowerElectronicsConnection 1" PowerElectronicsConnection#red

' PowerElectronicsThermalUnit inherits from PowerElectronicsUnit
class PowerElectronicsThermalUnit   {
}

PowerElectronicsUnit <|-- PowerElectronicsThermalUnit
PowerElectronicsThermalUnit "+PowerElectronicsThermalUnit 0..*" --> "+FossilFuels 0..1" FossilFuel

' PowerElectronicsUnit inherits from Equipment
abstract class PowerElectronicsUnit  <<abstract>> {
   +maxP : ActivePower [1]
   +minP : ActivePower [1]
}

Equipment <|-- PowerElectronicsUnit
PowerElectronicsUnit "+PowerElectronicsUnit 0..*" --> "+PowerElectronicsConnection 1" PowerElectronicsConnection

' PowerElectronicsWindUnit inherits from PowerElectronicsUnit
class PowerElectronicsWindUnit   {
}

PowerElectronicsUnit <|-- PowerElectronicsWindUnit

' PowerSystemResource inherits from IdentifiedObject
abstract class PowerSystemResource  <<abstract>> {
}

IdentifiedObject <|-- PowerSystemResource
PowerSystemResource "+PowerSystemResources 0..*" --> "+Location 0..1" Location#red

' PowerTransformer inherits from ConductingEquipment
class PowerTransformer <<Description>>  {
   +vectorGroup : string [1]
}

ConductingEquipment <|-- PowerTransformer
PowerTransformer "+PowerTransformer 0..1" --> "+PowerTransformerEnd 1..*" PowerTransformerEnd
PowerTransformer "+PowerTransformer 0..1" --> "+TransformerTanks 0..*" TransformerTank

' PowerTransformerEnd inherits from TransformerEnd
class PowerTransformerEnd <<Description>>  {
   +b : Susceptance [0..1]
   +connectionKind : WindingConnection [0..1]
   +g : Conductance [0..1]
   +phaseAngleClock : integer [0..1]
   +r : Resistance [1]
   +ratedS : ApparentPower [1]
   +ratedU : Voltage [1]
   +x : Reactance [0..1]
}

TransformerEnd <|-- PowerTransformerEnd
PowerTransformerEnd "+PowerTransformerEnd 0..*" --> "+PowerTransformer 1" PowerTransformer

' ProtectedSwitch inherits from Switch
abstract class ProtectedSwitch  <<abstract>> {
   +breakingCapacity : CurrentFlow [0..1]
}

Switch <|-- ProtectedSwitch

' RatioTapChanger inherits from TapChanger
class RatioTapChanger <<gmdm>><<ShadowExtension>>  {
   +stepVoltageIncrement : PerCent [0..1]
}

TapChanger <|-- RatioTapChanger
RatioTapChanger "+RatioTapChanger 0..1" --> "+TransformerEnd 1" TransformerEnd

' Recloser inherits from ProtectedSwitch
class Recloser <<Description>>  {
}

ProtectedSwitch <|-- Recloser

' RegulatingCondEq inherits from EnergyConnection
abstract class RegulatingCondEq  <<abstract>> {
}

EnergyConnection <|-- RegulatingCondEq
RegulatingCondEq "+RegulatingCondEq 0..*" --> "+RegulatingControl 0..1" RegulatingControl

' RegulatingControl inherits from PowerSystemResource
abstract class RegulatingControl  <<abstract>> {
   +discrete : boolean [1]
   +enabled : boolean [1]
   +mode : RegulatingControlModeKind [0..1]
   +monitoredPhase : PhaseCode [0..1]
   +targetDeadband : float [0..1]
   +targetValue : float [0..1]
}

PowerSystemResource <|-- RegulatingControl
RegulatingControl "+RegulatingControl 0..*" --> "+Terminal 1" Terminal

' Enumeration RegulatingControlModeKind
enum RegulatingControlModeKind <<enumeration>><<Attribute>>  {
   activePower
   admittance
   currentFlow
   powerFactor
   reactivePower
   temperature
   timeScheduled
   voltage
}

' RotatingMachine inherits from RegulatingCondEq
abstract class RotatingMachine  <<abstract>> {
   +ratedS : ApparentPower [1]
   +ratedU : Voltage [1]
}

RegulatingCondEq <|-- RotatingMachine

' Sectionaliser inherits from Switch
class Sectionaliser <<Description>>  {
}

Switch <|-- Sectionaliser

' SeriesCompensator inherits from ConductingEquipment
class SeriesCompensator <<Description>>  {
}

ConductingEquipment <|-- SeriesCompensator

' ShortCircuitTest inherits from TransformerTest
class ShortCircuitTest   {
   +energisedEndStep : integer [0..1]
   +groundedEndStep : integer [0..1]
   +leakageImpedance : Impedance [0..1]
   +leakageImpedanceZero : Impedance [0..1]
   +loss : KiloActivePower [0..1]
   +lossZero : KiloActivePower [0..1]
}

TransformerTest <|-- ShortCircuitTest
ShortCircuitTest "+EnergisedEndShortCircuitTests 0..*" --> "+EnergisedEnd 1" TransformerEndInfo
ShortCircuitTest "+GroundedEndShortCircuitTests 0..*" --> "+GroundedEnds 1..*" TransformerEndInfo

' ShuntCompensator inherits from RegulatingCondEq
abstract class ShuntCompensator  <<abstract>> {
   +aVRDelay : Seconds [0..1]
   +grounded : boolean [0..1]
   +maximumSections : integer [1]
   +nomU : Voltage [1]
   +normalSections : integer [1]
}

RegulatingCondEq <|-- ShuntCompensator
ShuntCompensator " " --> "+phaseConnection 0..1" PhaseShuntConnectionKind#red
ShuntCompensator "+ShuntCompensator 0..1" --> "+ShuntCompensatorPhase 0..*" ShuntCompensatorPhase

' ShuntCompensatorPhase inherits from PowerSystemResource
abstract class ShuntCompensatorPhase  <<abstract>> {
   +maximumSections : integer [1]
   +normalSections : integer [1]
}

PowerSystemResource <|-- ShuntCompensatorPhase
ShuntCompensatorPhase " " --> "+phase 1" SinglePhaseKind#red
ShuntCompensatorPhase "+ShuntCompensatorPhase 0..*" --> "+ShuntCompensator 1" ShuntCompensator

' Enumeration SinglePhaseKind
enum SinglePhaseKind <<enumeration>><<Attribute>>  {
   A
   B
   C
   N
   s1
   s2
}

' Substation inherits from EquipmentContainer
class Substation <<OfAggregate>>  {
}

EquipmentContainer <|-- Substation

' Switch inherits from ConductingEquipment
abstract class Switch  <<abstract>> {
   +locked : boolean [0..1]
   +normalOpen : boolean [1]
   +ratedCurrent : CurrentFlow [1]
}

ConductingEquipment <|-- Switch
Switch "+Switch 0..1" --> "+SwitchPhase 0..*" SwitchPhase#red

' SwitchPhase
class SwitchPhase   {
   +normalOpen : boolean [0..1]
   +phaseSide1 : SinglePhaseKind [1]
   +phaseSide2 : SinglePhaseKind [1]
}

SwitchPhase "+SwitchPhase 0..*" --> "+Switch 1" Switch#red

' SynchronousMachine inherits from RotatingMachine
class SynchronousMachine <<Description>>  {
}

RotatingMachine <|-- SynchronousMachine

' TapChanger inherits from PowerSystemResource
abstract class TapChanger  <<abstract>> {
   +controlEnabled : boolean [1]
   +ctRating : float [0..1]
   +ctRatio : float [0..1]
   +highStep : integer [1]
   +initialDelay : Seconds [0..1]
   +lowStep : integer [1]
   +ltcFlag : boolean [1]
   +neutralStep : integer [1]
   +neutralU : Voltage [1]
   +ptRatio : float [0..1]
   +subsequentDelay : Seconds [0..1]
}

PowerSystemResource <|-- TapChanger
TapChanger "+TapChanger 0..*" --> "+TapChangerControl 0..1" TapChangerControl

' TapChangerControl inherits from RegulatingControl
class TapChangerControl   {
   +lineDropCompensation : boolean [1]
   +lineDropR : Resistance [0..1]
   +lineDropX : Reactance [0..1]
   +maxLimitVoltage : Voltage [1]
   +minLimitVoltage : Voltage [1]
   +reverseLineDropR : Resistance [0..1]
   +reverseLineDropX : Reactance [0..1]
   +reverseTargetDeadband : Voltage [0..1]
   +reverseTargetValue : Voltage [0..1]
   +reverseToNeutral : boolean [0..1]
   +reversible : boolean [1]
   +reversingDelay : Seconds [0..1]
   +reversingPowerThreshold : ApparentPower [0..1]
}

RegulatingControl <|-- TapChangerControl

' Terminal inherits from ACDCTerminal
class Terminal <<Description>>  {
}

ACDCTerminal <|-- Terminal
Terminal "+Terminals 0..*" --> "+ConductingEquipment 1" ConductingEquipment
Terminal "+Terminals 0..*" --> "+ConnectivityNode 1" ConnectivityNode
Terminal "+NormalHeadTerminal 0..*" --> "+NormalHeadFeeder 0..1" Feeder#red
Terminal "+Terminal 0..1" --> "+TransformerEnd 0..1" TransformerEnd

' TextDiagramObject inherits from DiagramObject
class TextDiagramObject   {
   +text : string [1]
}

DiagramObject <|-- TextDiagramObject

' ThermalGeneratingUnit inherits from GeneratingUnit
class ThermalGeneratingUnit   {
}

GeneratingUnit <|-- ThermalGeneratingUnit
ThermalGeneratingUnit "+ThermalGeneratingUnit 0..1" --> "+FossilFuels 0..*" FossilFuel

' TransformerCoreAdmittance inherits from IdentifiedObject
class TransformerCoreAdmittance   {
   +b : Susceptance [1]
   +g : Conductance [1]
}

IdentifiedObject <|-- TransformerCoreAdmittance

' TransformerEnd inherits from IdentifiedObject
abstract class TransformerEnd  <<abstract>> {
   +endNumber : integer [1]
   +grounded : boolean [1]
   +rground : Resistance [0..1]
   +xground : Reactance [0..1]
}

IdentifiedObject <|-- TransformerEnd
TransformerEnd "+TransformerEnds 0..*" --> "+BaseVoltage 1" BaseVoltage#red
TransformerEnd "+TransformerEnd 0..*" --> "+CoreAdmittance 0..1" TransformerCoreAdmittance
TransformerEnd "+TransformerEnd 0..*" --> "+Terminal 1" Terminal

' TransformerEndInfo inherits from ConductingAssetInfo
class TransformerEndInfo   {
   +emergencyS : ApparentPower [0..1]
   +endNumber : integer [1]
   +insulationU : Voltage [0..1]
   +phaseAngleClock : integer [0..1]
   +r : Resistance [0..1]
   +ratedS : ApparentPower [0..1]
   +shortTermS : ApparentPower [0..1]
}

ConductingAssetInfo <|-- TransformerEndInfo
TransformerEndInfo " " --> "+connectionKind 0..1" WindingConnection#red
TransformerEndInfo "+TransformerEndInfos 0..*" --> "+TransformerTankInfo 0..1" TransformerTankInfo

' TransformerMeshImpedance inherits from IdentifiedObject
class TransformerMeshImpedance   {
   +r : Resistance [1]
   +x : Reactance [1]
}

IdentifiedObject <|-- TransformerMeshImpedance
TransformerMeshImpedance "+FromMeshImpedance 0..*" --> "+FromTransformerEnd 0..1" TransformerEnd
TransformerMeshImpedance "+ToMeshImpedance 0..*" --> "+ToTransformerEnd 0..*" TransformerEnd

' TransformerTank inherits from Equipment
class TransformerTank <<Description>>  {
}

Equipment <|-- TransformerTank
TransformerTank "+TransformerTanks 0..*" --> "+PowerTransformer 1" PowerTransformer
TransformerTank "+TransformerTank 0..1" --> "+TransformerTankEnds 1..*" TransformerTankEnd
TransformerTank "+TransformerTanks 0..*" --> "+TransformerTankInfo 0..1" TransformerTankInfo#red

' TransformerTankEnd inherits from TransformerEnd
class TransformerTankEnd <<Description>>  {
   +<<gmdm>> orderedPhases : OrderedPhaseCodeKind [1]
}

TransformerEnd <|-- TransformerTankEnd
TransformerTankEnd "+TransformerTankEnds 0..*" --> "+TransformerTank 1" TransformerTank

' TransformerTankInfo inherits from AssetInfo
class TransformerTankInfo <<ShadowExtension>><<gmdm>>  {
}

AssetInfo <|-- TransformerTankInfo

' IdentifiedObject
abstract class IdentifiedObject  <<abstract>> {
   +basePower : ApparentPower [1]
   +temperature : Temperature [1]
}


' VisibilityLayer
class VisibilityLayer   {
   +drawingOrder : integer [0..1]
}

VisibilityLayer "+VisibilityLayers 0..*" --> "+VisibleObjects 0..*" DiagramObject

' VoltageLevel inherits from EquipmentContainer
class VoltageLevel   {
}

EquipmentContainer <|-- VoltageLevel
VoltageLevel "+VoltageLevel 0..*" --> "+BaseVoltage 1" BaseVoltage
VoltageLevel "+VoltageLevels 0..*" --o "+Substation 1" Substation

' Enumeration WindGenUnitKind
enum WindGenUnitKind <<enumeration>><<Attribute>>  {
   offshore
   onshore
}

' WindGeneratingUnit inherits from GeneratingUnit
class WindGeneratingUnit   {
   +windGenUnitType : WindGenUnitKind [0..1]
}

GeneratingUnit <|-- WindGeneratingUnit

' Enumeration WindingConnection
enum WindingConnection <<enumeration>><<Attribute>>  {
   A
   D
   I
   Y
   Yn
   Z
   Zn
}

@enduml
